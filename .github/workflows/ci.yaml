on:
  push:
    branches:
      - "**"

jobs:
  install:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/setup-node@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: 16
      - name: Install dependencies
        run: npm install
        if: steps.cache.outputs.cache-hit != 'true'

  changed:
    name: Version changed packages
    runs-on: ubuntu-latest
    needs:
      - install
    outputs:
      matrices: ${{ steps.matrices.outputs.matrices }}
      packages: ${{ steps.packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Get changed packages
        id: packages
        run: echo "::set-output name=packages ::$((npx lerna changed --loglevel silent || true) | paste -sd, -)"
      - name: Generate matrices of jobs for changed packages
        id: matrices
        run: echo "::set-output name=matrices ::$(./.github/scripts/generate_job_matrices ${{ steps.packages.outputs.packages }})"
      - name: Version changed packages
        if: steps.packages.outputs.packages != null
        run: npx lerna version --no-git-tag-version --no-push
      - name: Upload version artifacts
        if: steps.packages.outputs.packages != null
        uses: actions/upload-artifact@v2
        with:
          name: version-artifacts
          path: packages/*/package.json

  packages-build:
    name: Build packages
    runs-on: ubuntu-latest
    needs:
      - changed
      - install
    if: needs.changed.outputs.packages != null
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/download-artifact@v2
        with:
          name: version-artifacts
          path: packages
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Build changed packages
        env:
          NODE_ENV: production
        run: npx lerna run build --scope={,${{ needs.changed.outputs.packages }}} --include-dependencies
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: packages/*/dist

  docker-lint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    needs:
      - changed
    if: fromJSON(needs.changed.outputs.matrices).docker-build[0] != null
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.matrices).docker-build }}
    steps:
      - uses: actions/checkout@v2
      - name: Lint Dockerfiles
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: packages/${{ matrix.package }}/Dockerfile

  docker-build:
    name: Build containers
    runs-on: ubuntu-latest
    needs:
      - changed
      - docker-lint
      - packages-build
    if: fromJSON(needs.changed.outputs.matrices).docker-build[0] != null
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changed.outputs.matrices).docker-build }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: version-artifacts
          path: packages
      - uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: packages
      - name: Determine version
        id: version
        run: |
          VERSION="v$(jq -r .version packages/${{ matrix.package }}/package.json)"
          echo "::set-output name=version ::$VERSION"
      - name: Log into GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.ref == 'refs/heads/master' }}
          tags: ghcr.io/chiel/monorepo-ci/${{ matrix.package }}:${{ steps.version.outputs.version }}
          context: packages/${{ matrix.package }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - changed
      - docker-build
      - docker-lint
      - packages-build
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.changed.outputs.packages != null &&
      (needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped') &&
      (needs.docker-lint.result == 'success' || needs.docker-lint.result == 'skipped') &&
      (needs.packages-build.result == 'success' || needs.packages-build.result == 'skipped')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: packages
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Configure CI git user
        run: |
          git config --global user.email "chiel@kunkels.me"
          git config --global user.name "Chiel Kunkels"
      - name: Set lerna version hook to update package-lock.json
        run: |
          echo "$(jq --arg version 'npm install --package-lock-only && git add package-lock.json' '.scripts.version = $version' package.json)" > package.json
          git update-index --assume-unchanged package.json
      - name: Version packages
        run: npx lerna version
